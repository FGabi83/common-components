/*===GENERAL STYLE===*/

* {
  box-sizing: border-box;
}

/*===HEADER STYLES===*/

.cover {
  background: url('https://orange.codeberryschool.com/content/images/project-assets/page-header-bg.jpg') no-repeat center; 
  background-size: cover;/*szépen legyen a kép körbevágva*/
  height: 100vh;
  width: 100%;
  color: hsla(0,0%,100%,.7);
  font-family: 'Cormorant Garamond', serif;
  text-align: center;
 /*A vertikális pozicionálás egy picit nehezebb. Most a display tulajdonság table és table-cell értékeit hívjuk segítségül. Ezek segítségével megmondhatjuk a .cover-nek, hogy viselkedjen úgy, mint egy táblázat. Ezután a .wrapper-t pedig kikiáltjuk ezen táblázat egy cellájának, amit már középre rendezhetünk vertikálisan.  A .wrapper div szerepe pontosan ennyi a vázban. Minden elemet magába csomagol, amelyek így egyszerűen válhatnak egy táblázat cellájának tartalmává. Ezt a megoldást lassanként felváltja a még igencsak friss flexbox technika, amely rengeteg pozicionálási fejfájásra ad választ a CSS-ben.*/
  display: table; /*ezután szélességet 100%ra kell állítani*/
}

.wrapper {
  display: table-cell;
  vertical-align: middle;
  padding: 0.625rem;
}

.byline h2 {
  font-size: 1.125rem;
  line-height: 1.5rem;
  letter-spacing: .1rem;
  margin-bottom: .5rem;
  text-transform: uppercase;
}

.byline h3 {
  font-size: 1.125rem;
  line-height: 1.5rem;
}

.headline {
  font-size: 3rem;
  margin: 2rem 0;
}

@media screen and (min-width: 1224px) {

  .headline {
    font-size: 6rem;
  }

}

.tagline {
  font-size: 1.25rem;
  line-height: 1.5rem;
}

/* ==== ARTICLE STYLES ==== */

section {
  padding: 0 .625rem;
}

@media screen and (min-width: 1224px) {

  section {
    width: 50%;
    max-width: 600px;
    margin: 2rem auto;
  }

}

section h1 {
  font-family: 'Cormorant Garamond', serif;
  font-size: 2rem;
  line-height: 1.25;
  margin: 2rem 0;
}

section p {
  font-family: 'Libre Franklin', sans-serif;
  font-size: 1rem;
  line-height: 1.5;
  margin: 1rem 0;
}